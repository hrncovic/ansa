//
// Generated file, do not edit! Created by opp_msgc 4.2 from ansa/ospfv3/messages/ansaOspfPacket6.msg.
//

#ifndef _ANSAOSPFPACKET6_M_H_
#define _ANSAOSPFPACKET6_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "ansaOspfCommon6.h"
#include "IPv6Address.h"
using namespace AnsaOspf6;
// }}



/**
 * Enum generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * enum OspfPacketType6 {
 *    HelloPacket = 1;
 *    DatabaseDescriptionPacket = 2;
 *    LinkStateRequestPacket = 3;
 *    LinkStateUpdatePacket = 4;
 *    LinkStateAcknowledgementPacket = 5;
 * }
 * </pre>
 */
enum OspfPacketType6 {
    HelloPacket = 1,
    DatabaseDescriptionPacket = 2,
    LinkStateRequestPacket = 3,
    LinkStateUpdatePacket = 4,
    LinkStateAcknowledgementPacket = 5
};

/**
 * Enum generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * enum LsaType6 {
 *    RouterLsaType = 1;
 *    NetworkLsaType = 2;
 *    InterAreaPrefixLsaType = 3;
 *    InterAreaRouterLsaType = 4;
 *    AsExternalLsaType = 5;
 *    NssaLsaType = 7;	
 *    LinkLsaType = 8;
 *    IntraAreaPrefixLsaType = 9;
 * }
 * </pre>
 */
enum LsaType6 {
    RouterLsaType = 1,
    NetworkLsaType = 2,
    InterAreaPrefixLsaType = 3,
    InterAreaRouterLsaType = 4,
    AsExternalLsaType = 5,
    NssaLsaType = 7,
    LinkLsaType = 8,
    IntraAreaPrefixLsaType = 9
};

/**
 * Enum generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * enum LinkType6 {
 *    PointToPointLink = 1;
 *    TransitLink = 2;
 *    VirtualLink = 4;
 * }
 * </pre>
 */
enum LinkType6 {
    PointToPointLink = 1,
    TransitLink = 2,
    VirtualLink = 4
};

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class Link6 {
 *    uint8 type enum(LinkType6) = PointToPointLink;
 *    uint16 metric;
 *    IfaceID interfaceID;
 *    IfaceID neighborInterfaceID;
 *    RouterID neighborRouterID;
 * }
 * </pre>
 */
class Link6 : public ::cObject
{
  protected:
    uint8 type_var;
    uint16 metric_var;
    IfaceID interfaceID_var;
    IfaceID neighborInterfaceID_var;
    RouterID neighborRouterID_var;

  private:
    void copy(const Link6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Link6&);

  public:
    Link6();
    Link6(const Link6& other);
    virtual ~Link6();
    Link6& operator=(const Link6& other);
    virtual Link6 *dup() const {return new Link6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint8 getType() const;
    virtual void setType(uint8 type);
    virtual uint16 getMetric() const;
    virtual void setMetric(uint16 metric);
    virtual IfaceID& getInterfaceID();
    virtual const IfaceID& getInterfaceID() const {return const_cast<Link6*>(this)->getInterfaceID();}
    virtual void setInterfaceID(const IfaceID& interfaceID);
    virtual IfaceID& getNeighborInterfaceID();
    virtual const IfaceID& getNeighborInterfaceID() const {return const_cast<Link6*>(this)->getNeighborInterfaceID();}
    virtual void setNeighborInterfaceID(const IfaceID& neighborInterfaceID);
    virtual RouterID& getNeighborRouterID();
    virtual const RouterID& getNeighborRouterID() const {return const_cast<Link6*>(this)->getNeighborRouterID();}
    virtual void setNeighborRouterID(const RouterID& neighborRouterID);
};

inline void doPacking(cCommBuffer *b, Link6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Link6& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from ansa/ospfv3/messages/ansaOspfPacket6.msg by opp_msgc.
 */
struct OspfPrefixOptions6
{
    OspfPrefixOptions6();
    bool NU_NoUnicast;
    bool LA_LocalAddress;
};

void doPacking(cCommBuffer *b, OspfPrefixOptions6& a);
void doUnpacking(cCommBuffer *b, OspfPrefixOptions6& a);

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfPrefix6 {
 *    uint8 prefixLenght;
 *    OspfPrefixOptions6 prefixOptions;
 *    uint16 metric;
 *    IPv6Address addressPrefix;
 * }
 * </pre>
 */
class OspfPrefix6 : public ::cObject
{
  protected:
    uint8 prefixLenght_var;
    OspfPrefixOptions6 prefixOptions_var;
    uint16 metric_var;
    IPv6Address addressPrefix_var;

  private:
    void copy(const OspfPrefix6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfPrefix6&);

  public:
    OspfPrefix6();
    OspfPrefix6(const OspfPrefix6& other);
    virtual ~OspfPrefix6();
    OspfPrefix6& operator=(const OspfPrefix6& other);
    virtual OspfPrefix6 *dup() const {return new OspfPrefix6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint8 getPrefixLenght() const;
    virtual void setPrefixLenght(uint8 prefixLenght);
    virtual OspfPrefixOptions6& getPrefixOptions();
    virtual const OspfPrefixOptions6& getPrefixOptions() const {return const_cast<OspfPrefix6*>(this)->getPrefixOptions();}
    virtual void setPrefixOptions(const OspfPrefixOptions6& prefixOptions);
    virtual uint16 getMetric() const;
    virtual void setMetric(uint16 metric);
    virtual IPv6Address& getAddressPrefix();
    virtual const IPv6Address& getAddressPrefix() const {return const_cast<OspfPrefix6*>(this)->getAddressPrefix();}
    virtual void setAddressPrefix(const IPv6Address& addressPrefix);
};

inline void doPacking(cCommBuffer *b, OspfPrefix6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfPrefix6& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from ansa/ospfv3/messages/ansaOspfPacket6.msg by opp_msgc.
 */
struct OspfOptions6
{
    OspfOptions6();
    bool V6_IPv6Routing;
    bool E_ExternalRoutingCapability;
    bool N_NSSA;
    bool R_Router;
    bool DC_DemandCircuits;
};

void doPacking(cCommBuffer *b, OspfOptions6& a);
void doUnpacking(cCommBuffer *b, OspfOptions6& a);

/**
 * Struct generated from ansa/ospfv3/messages/ansaOspfPacket6.msg by opp_msgc.
 */
struct OspfDdOptions6
{
    OspfDdOptions6();
    bool I_Init;
    bool M_More;
    bool MS_MasterSlave;
};

void doPacking(cCommBuffer *b, OspfDdOptions6& a);
void doUnpacking(cCommBuffer *b, OspfDdOptions6& a);

/**
 * Struct generated from ansa/ospfv3/messages/ansaOspfPacket6.msg by opp_msgc.
 */
struct OspfLsaRequest6
{
    OspfLsaRequest6();
    uint16 lsType;
    uint32 linkStateID;
    RouterID advertisingRouter;
};

void doPacking(cCommBuffer *b, OspfLsaRequest6& a);
void doUnpacking(cCommBuffer *b, OspfLsaRequest6& a);

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfLsaHeader6 {
 *    uint16 lsAge = 0;
 *    uint16 lsType enum(LsaType6) = RouterLsaType;
 *    uint32 linkStateID;
 *    RouterID advertisingRouter;
 *    uint32 lsSequenceNumber = 0;
 * }
 * </pre>
 */
class OspfLsaHeader6 : public ::cObject
{
  protected:
    uint16 lsAge_var;
    uint16 lsType_var;
    uint32 linkStateID_var;
    RouterID advertisingRouter_var;
    uint32 lsSequenceNumber_var;

  private:
    void copy(const OspfLsaHeader6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfLsaHeader6&);

  public:
    OspfLsaHeader6();
    OspfLsaHeader6(const OspfLsaHeader6& other);
    virtual ~OspfLsaHeader6();
    OspfLsaHeader6& operator=(const OspfLsaHeader6& other);
    virtual OspfLsaHeader6 *dup() const {return new OspfLsaHeader6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint16 getLsAge() const;
    virtual void setLsAge(uint16 lsAge);
    virtual uint16 getLsType() const;
    virtual void setLsType(uint16 lsType);
    virtual uint32 getLinkStateID() const;
    virtual void setLinkStateID(uint32 linkStateID);
    virtual RouterID& getAdvertisingRouter();
    virtual const RouterID& getAdvertisingRouter() const {return const_cast<OspfLsaHeader6*>(this)->getAdvertisingRouter();}
    virtual void setAdvertisingRouter(const RouterID& advertisingRouter);
    virtual uint32 getLsSequenceNumber() const;
    virtual void setLsSequenceNumber(uint32 lsSequenceNumber);
};

inline void doPacking(cCommBuffer *b, OspfLsaHeader6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfLsaHeader6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfLsa6 {
 *    OspfLsaHeader6 header;
 * }
 * </pre>
 */
class OspfLsa6 : public ::cObject
{
  protected:
    OspfLsaHeader6 header_var;

  private:
    void copy(const OspfLsa6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfLsa6&);

  public:
    OspfLsa6();
    OspfLsa6(const OspfLsa6& other);
    virtual ~OspfLsa6();
    OspfLsa6& operator=(const OspfLsa6& other);
    virtual OspfLsa6 *dup() const {return new OspfLsa6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual OspfLsaHeader6& getHeader();
    virtual const OspfLsaHeader6& getHeader() const {return const_cast<OspfLsa6*>(this)->getHeader();}
    virtual void setHeader(const OspfLsaHeader6& header);
};

inline void doPacking(cCommBuffer *b, OspfLsa6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfLsa6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfRouterLsa6 extends OspfLsa6 {
 *    bool V_VirtualLinkEndpoint = false;
 *    bool E_AsBoundaryRouter = false;
 *    bool B_AreaBorderRouter = false;
 *    OspfOptions6 options;
 *    Link6 links[];
 * }
 * </pre>
 */
class OspfRouterLsa6 : public ::OspfLsa6
{
  protected:
    bool V_VirtualLinkEndpoint_var;
    bool E_AsBoundaryRouter_var;
    bool B_AreaBorderRouter_var;
    OspfOptions6 options_var;
    Link6 *links_var; // array ptr
    unsigned int links_arraysize;

  private:
    void copy(const OspfRouterLsa6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfRouterLsa6&);

  public:
    OspfRouterLsa6();
    OspfRouterLsa6(const OspfRouterLsa6& other);
    virtual ~OspfRouterLsa6();
    OspfRouterLsa6& operator=(const OspfRouterLsa6& other);
    virtual OspfRouterLsa6 *dup() const {return new OspfRouterLsa6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getV_VirtualLinkEndpoint() const;
    virtual void setV_VirtualLinkEndpoint(bool V_VirtualLinkEndpoint);
    virtual bool getE_AsBoundaryRouter() const;
    virtual void setE_AsBoundaryRouter(bool E_AsBoundaryRouter);
    virtual bool getB_AreaBorderRouter() const;
    virtual void setB_AreaBorderRouter(bool B_AreaBorderRouter);
    virtual OspfOptions6& getOptions();
    virtual const OspfOptions6& getOptions() const {return const_cast<OspfRouterLsa6*>(this)->getOptions();}
    virtual void setOptions(const OspfOptions6& options);
    virtual void setLinksArraySize(unsigned int size);
    virtual unsigned int getLinksArraySize() const;
    virtual Link6& getLinks(unsigned int k);
    virtual const Link6& getLinks(unsigned int k) const {return const_cast<OspfRouterLsa6*>(this)->getLinks(k);}
    virtual void setLinks(unsigned int k, const Link6& links);
};

inline void doPacking(cCommBuffer *b, OspfRouterLsa6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfRouterLsa6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfNetworkLsa6 extends OspfLsa6 {
 *    OspfOptions6 options;
 *    RouterID attachedRouters[];
 * }
 * </pre>
 */
class OspfNetworkLsa6 : public ::OspfLsa6
{
  protected:
    OspfOptions6 options_var;
    RouterID *attachedRouters_var; // array ptr
    unsigned int attachedRouters_arraysize;

  private:
    void copy(const OspfNetworkLsa6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfNetworkLsa6&);

  public:
    OspfNetworkLsa6();
    OspfNetworkLsa6(const OspfNetworkLsa6& other);
    virtual ~OspfNetworkLsa6();
    OspfNetworkLsa6& operator=(const OspfNetworkLsa6& other);
    virtual OspfNetworkLsa6 *dup() const {return new OspfNetworkLsa6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual OspfOptions6& getOptions();
    virtual const OspfOptions6& getOptions() const {return const_cast<OspfNetworkLsa6*>(this)->getOptions();}
    virtual void setOptions(const OspfOptions6& options);
    virtual void setAttachedRoutersArraySize(unsigned int size);
    virtual unsigned int getAttachedRoutersArraySize() const;
    virtual RouterID& getAttachedRouters(unsigned int k);
    virtual const RouterID& getAttachedRouters(unsigned int k) const {return const_cast<OspfNetworkLsa6*>(this)->getAttachedRouters(k);}
    virtual void setAttachedRouters(unsigned int k, const RouterID& attachedRouters);
};

inline void doPacking(cCommBuffer *b, OspfNetworkLsa6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfNetworkLsa6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfInterAreaPrefixLsa6 extends OspfLsa6 {
 *    uint16 metric;
 *    uint8 prefixLenght;
 *    OspfPrefixOptions6 prefixOptions;
 *    IPv6Address addressPrefix; 
 * }
 * </pre>
 */
class OspfInterAreaPrefixLsa6 : public ::OspfLsa6
{
  protected:
    uint16 metric_var;
    uint8 prefixLenght_var;
    OspfPrefixOptions6 prefixOptions_var;
    IPv6Address addressPrefix_var;

  private:
    void copy(const OspfInterAreaPrefixLsa6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfInterAreaPrefixLsa6&);

  public:
    OspfInterAreaPrefixLsa6();
    OspfInterAreaPrefixLsa6(const OspfInterAreaPrefixLsa6& other);
    virtual ~OspfInterAreaPrefixLsa6();
    OspfInterAreaPrefixLsa6& operator=(const OspfInterAreaPrefixLsa6& other);
    virtual OspfInterAreaPrefixLsa6 *dup() const {return new OspfInterAreaPrefixLsa6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint16 getMetric() const;
    virtual void setMetric(uint16 metric);
    virtual uint8 getPrefixLenght() const;
    virtual void setPrefixLenght(uint8 prefixLenght);
    virtual OspfPrefixOptions6& getPrefixOptions();
    virtual const OspfPrefixOptions6& getPrefixOptions() const {return const_cast<OspfInterAreaPrefixLsa6*>(this)->getPrefixOptions();}
    virtual void setPrefixOptions(const OspfPrefixOptions6& prefixOptions);
    virtual IPv6Address& getAddressPrefix();
    virtual const IPv6Address& getAddressPrefix() const {return const_cast<OspfInterAreaPrefixLsa6*>(this)->getAddressPrefix();}
    virtual void setAddressPrefix(const IPv6Address& addressPrefix);
};

inline void doPacking(cCommBuffer *b, OspfInterAreaPrefixLsa6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfInterAreaPrefixLsa6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfInterAreaRouterLsa6 extends OspfLsa6 {
 *    OspfOptions6 options;
 *    uint16 metric;
 *    RouterID destinationRouterID;
 * }
 * </pre>
 */
class OspfInterAreaRouterLsa6 : public ::OspfLsa6
{
  protected:
    OspfOptions6 options_var;
    uint16 metric_var;
    RouterID destinationRouterID_var;

  private:
    void copy(const OspfInterAreaRouterLsa6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfInterAreaRouterLsa6&);

  public:
    OspfInterAreaRouterLsa6();
    OspfInterAreaRouterLsa6(const OspfInterAreaRouterLsa6& other);
    virtual ~OspfInterAreaRouterLsa6();
    OspfInterAreaRouterLsa6& operator=(const OspfInterAreaRouterLsa6& other);
    virtual OspfInterAreaRouterLsa6 *dup() const {return new OspfInterAreaRouterLsa6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual OspfOptions6& getOptions();
    virtual const OspfOptions6& getOptions() const {return const_cast<OspfInterAreaRouterLsa6*>(this)->getOptions();}
    virtual void setOptions(const OspfOptions6& options);
    virtual uint16 getMetric() const;
    virtual void setMetric(uint16 metric);
    virtual RouterID& getDestinationRouterID();
    virtual const RouterID& getDestinationRouterID() const {return const_cast<OspfInterAreaRouterLsa6*>(this)->getDestinationRouterID();}
    virtual void setDestinationRouterID(const RouterID& destinationRouterID);
};

inline void doPacking(cCommBuffer *b, OspfInterAreaRouterLsa6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfInterAreaRouterLsa6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfAsExternalLsa6 extends OspfLsa6 {
 *    bool E_ExternalMetricType = false;
 *    bool F_ForwardingAddress = false;
 *    bool T_ExternalRouteTag = false;
 *    uint16 metric;
 *    uint8 prefixLenght;
 *    OspfPrefixOptions6 prefixOptions;
 *    uint16 referencedLsType enum(LsaType6) = 0;	
 *    IPv6Address addressPrefix;
 *    IPv6Address forwardingAddress;
 *    uint32 externalRouteTag;
 *    uint32 referencedLinkStateID;				
 * }
 * </pre>
 */
class OspfAsExternalLsa6 : public ::OspfLsa6
{
  protected:
    bool E_ExternalMetricType_var;
    bool F_ForwardingAddress_var;
    bool T_ExternalRouteTag_var;
    uint16 metric_var;
    uint8 prefixLenght_var;
    OspfPrefixOptions6 prefixOptions_var;
    uint16 referencedLsType_var;
    IPv6Address addressPrefix_var;
    IPv6Address forwardingAddress_var;
    uint32 externalRouteTag_var;
    uint32 referencedLinkStateID_var;

  private:
    void copy(const OspfAsExternalLsa6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfAsExternalLsa6&);

  public:
    OspfAsExternalLsa6();
    OspfAsExternalLsa6(const OspfAsExternalLsa6& other);
    virtual ~OspfAsExternalLsa6();
    OspfAsExternalLsa6& operator=(const OspfAsExternalLsa6& other);
    virtual OspfAsExternalLsa6 *dup() const {return new OspfAsExternalLsa6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getE_ExternalMetricType() const;
    virtual void setE_ExternalMetricType(bool E_ExternalMetricType);
    virtual bool getF_ForwardingAddress() const;
    virtual void setF_ForwardingAddress(bool F_ForwardingAddress);
    virtual bool getT_ExternalRouteTag() const;
    virtual void setT_ExternalRouteTag(bool T_ExternalRouteTag);
    virtual uint16 getMetric() const;
    virtual void setMetric(uint16 metric);
    virtual uint8 getPrefixLenght() const;
    virtual void setPrefixLenght(uint8 prefixLenght);
    virtual OspfPrefixOptions6& getPrefixOptions();
    virtual const OspfPrefixOptions6& getPrefixOptions() const {return const_cast<OspfAsExternalLsa6*>(this)->getPrefixOptions();}
    virtual void setPrefixOptions(const OspfPrefixOptions6& prefixOptions);
    virtual uint16 getReferencedLsType() const;
    virtual void setReferencedLsType(uint16 referencedLsType);
    virtual IPv6Address& getAddressPrefix();
    virtual const IPv6Address& getAddressPrefix() const {return const_cast<OspfAsExternalLsa6*>(this)->getAddressPrefix();}
    virtual void setAddressPrefix(const IPv6Address& addressPrefix);
    virtual IPv6Address& getForwardingAddress();
    virtual const IPv6Address& getForwardingAddress() const {return const_cast<OspfAsExternalLsa6*>(this)->getForwardingAddress();}
    virtual void setForwardingAddress(const IPv6Address& forwardingAddress);
    virtual uint32 getExternalRouteTag() const;
    virtual void setExternalRouteTag(uint32 externalRouteTag);
    virtual uint32 getReferencedLinkStateID() const;
    virtual void setReferencedLinkStateID(uint32 referencedLinkStateID);
};

inline void doPacking(cCommBuffer *b, OspfAsExternalLsa6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfAsExternalLsa6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfLinkLsa6 extends OspfLsa6 {
 *    uint8 rtrPriority;
 *    OspfOptions6 options;
 *    IPv6Address linkLocalAddress;
 *    OspfPrefix6 prefixes[];
 * }
 * </pre>
 */
class OspfLinkLsa6 : public ::OspfLsa6
{
  protected:
    uint8 rtrPriority_var;
    OspfOptions6 options_var;
    IPv6Address linkLocalAddress_var;
    OspfPrefix6 *prefixes_var; // array ptr
    unsigned int prefixes_arraysize;

  private:
    void copy(const OspfLinkLsa6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfLinkLsa6&);

  public:
    OspfLinkLsa6();
    OspfLinkLsa6(const OspfLinkLsa6& other);
    virtual ~OspfLinkLsa6();
    OspfLinkLsa6& operator=(const OspfLinkLsa6& other);
    virtual OspfLinkLsa6 *dup() const {return new OspfLinkLsa6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint8 getRtrPriority() const;
    virtual void setRtrPriority(uint8 rtrPriority);
    virtual OspfOptions6& getOptions();
    virtual const OspfOptions6& getOptions() const {return const_cast<OspfLinkLsa6*>(this)->getOptions();}
    virtual void setOptions(const OspfOptions6& options);
    virtual IPv6Address& getLinkLocalAddress();
    virtual const IPv6Address& getLinkLocalAddress() const {return const_cast<OspfLinkLsa6*>(this)->getLinkLocalAddress();}
    virtual void setLinkLocalAddress(const IPv6Address& linkLocalAddress);
    virtual void setPrefixesArraySize(unsigned int size);
    virtual unsigned int getPrefixesArraySize() const;
    virtual OspfPrefix6& getPrefixes(unsigned int k);
    virtual const OspfPrefix6& getPrefixes(unsigned int k) const {return const_cast<OspfLinkLsa6*>(this)->getPrefixes(k);}
    virtual void setPrefixes(unsigned int k, const OspfPrefix6& prefixes);
};

inline void doPacking(cCommBuffer *b, OspfLinkLsa6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfLinkLsa6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * class OspfIntraAreaPrefixLsa6 extends OspfLsa6 {
 *    uint16 referencedLsType enum(LsaType6) = 0;
 *    uint32 referencedLinkStateID;
 *    RouterID referencedAdvertisingRouter;
 *    OspfPrefix6 prefixes[];
 * }
 * </pre>
 */
class OspfIntraAreaPrefixLsa6 : public ::OspfLsa6
{
  protected:
    uint16 referencedLsType_var;
    uint32 referencedLinkStateID_var;
    RouterID referencedAdvertisingRouter_var;
    OspfPrefix6 *prefixes_var; // array ptr
    unsigned int prefixes_arraysize;

  private:
    void copy(const OspfIntraAreaPrefixLsa6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfIntraAreaPrefixLsa6&);

  public:
    OspfIntraAreaPrefixLsa6();
    OspfIntraAreaPrefixLsa6(const OspfIntraAreaPrefixLsa6& other);
    virtual ~OspfIntraAreaPrefixLsa6();
    OspfIntraAreaPrefixLsa6& operator=(const OspfIntraAreaPrefixLsa6& other);
    virtual OspfIntraAreaPrefixLsa6 *dup() const {return new OspfIntraAreaPrefixLsa6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint16 getReferencedLsType() const;
    virtual void setReferencedLsType(uint16 referencedLsType);
    virtual uint32 getReferencedLinkStateID() const;
    virtual void setReferencedLinkStateID(uint32 referencedLinkStateID);
    virtual RouterID& getReferencedAdvertisingRouter();
    virtual const RouterID& getReferencedAdvertisingRouter() const {return const_cast<OspfIntraAreaPrefixLsa6*>(this)->getReferencedAdvertisingRouter();}
    virtual void setReferencedAdvertisingRouter(const RouterID& referencedAdvertisingRouter);
    virtual void setPrefixesArraySize(unsigned int size);
    virtual unsigned int getPrefixesArraySize() const;
    virtual OspfPrefix6& getPrefixes(unsigned int k);
    virtual const OspfPrefix6& getPrefixes(unsigned int k) const {return const_cast<OspfIntraAreaPrefixLsa6*>(this)->getPrefixes(k);}
    virtual void setPrefixes(unsigned int k, const OspfPrefix6& prefixes);
};

inline void doPacking(cCommBuffer *b, OspfIntraAreaPrefixLsa6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfIntraAreaPrefixLsa6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * packet OspfPacket6 {
 *    uint8 version = 3;			
 *    uint8 type enum(OspfPacketType6) = HelloPacket;
 *    RouterID routerID;
 *    AreaID areaID;
 *    InstanceID instanceID = 0;	
 * }
 * </pre>
 */
class OspfPacket6 : public ::cPacket
{
  protected:
    uint8 version_var;
    uint8 type_var;
    RouterID routerID_var;
    AreaID areaID_var;
    InstanceID instanceID_var;

  private:
    void copy(const OspfPacket6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfPacket6&);

  public:
    OspfPacket6(const char *name=NULL, int kind=0);
    OspfPacket6(const OspfPacket6& other);
    virtual ~OspfPacket6();
    OspfPacket6& operator=(const OspfPacket6& other);
    virtual OspfPacket6 *dup() const {return new OspfPacket6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint8 getVersion() const;
    virtual void setVersion(uint8 version);
    virtual uint8 getType() const;
    virtual void setType(uint8 type);
    virtual RouterID& getRouterID();
    virtual const RouterID& getRouterID() const {return const_cast<OspfPacket6*>(this)->getRouterID();}
    virtual void setRouterID(const RouterID& routerID);
    virtual AreaID& getAreaID();
    virtual const AreaID& getAreaID() const {return const_cast<OspfPacket6*>(this)->getAreaID();}
    virtual void setAreaID(const AreaID& areaID);
    virtual InstanceID& getInstanceID();
    virtual const InstanceID& getInstanceID() const {return const_cast<OspfPacket6*>(this)->getInstanceID();}
    virtual void setInstanceID(const InstanceID& instanceID);
};

inline void doPacking(cCommBuffer *b, OspfPacket6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfPacket6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * packet OspfHelloPacket6 extends OspfPacket6 {	
 *    IfaceID interfaceID;
 *    uint8 rtrPriority;
 *    OspfOptions6 options;
 *    uint16 helloInterval;
 *    uint16 routerDeadInterval;
 *    DesignatedRouterID designatedRouterID;
 *    DesignatedRouterID backupDesignatedRouterID;
 *    RouterID neighborID[];
 * }
 * </pre>
 */
class OspfHelloPacket6 : public ::OspfPacket6
{
  protected:
    IfaceID interfaceID_var;
    uint8 rtrPriority_var;
    OspfOptions6 options_var;
    uint16 helloInterval_var;
    uint16 routerDeadInterval_var;
    DesignatedRouterID designatedRouterID_var;
    DesignatedRouterID backupDesignatedRouterID_var;
    RouterID *neighborID_var; // array ptr
    unsigned int neighborID_arraysize;

  private:
    void copy(const OspfHelloPacket6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfHelloPacket6&);

  public:
    OspfHelloPacket6(const char *name=NULL, int kind=0);
    OspfHelloPacket6(const OspfHelloPacket6& other);
    virtual ~OspfHelloPacket6();
    OspfHelloPacket6& operator=(const OspfHelloPacket6& other);
    virtual OspfHelloPacket6 *dup() const {return new OspfHelloPacket6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IfaceID& getInterfaceID();
    virtual const IfaceID& getInterfaceID() const {return const_cast<OspfHelloPacket6*>(this)->getInterfaceID();}
    virtual void setInterfaceID(const IfaceID& interfaceID);
    virtual uint8 getRtrPriority() const;
    virtual void setRtrPriority(uint8 rtrPriority);
    virtual OspfOptions6& getOptions();
    virtual const OspfOptions6& getOptions() const {return const_cast<OspfHelloPacket6*>(this)->getOptions();}
    virtual void setOptions(const OspfOptions6& options);
    virtual uint16 getHelloInterval() const;
    virtual void setHelloInterval(uint16 helloInterval);
    virtual uint16 getRouterDeadInterval() const;
    virtual void setRouterDeadInterval(uint16 routerDeadInterval);
    virtual DesignatedRouterID& getDesignatedRouterID();
    virtual const DesignatedRouterID& getDesignatedRouterID() const {return const_cast<OspfHelloPacket6*>(this)->getDesignatedRouterID();}
    virtual void setDesignatedRouterID(const DesignatedRouterID& designatedRouterID);
    virtual DesignatedRouterID& getBackupDesignatedRouterID();
    virtual const DesignatedRouterID& getBackupDesignatedRouterID() const {return const_cast<OspfHelloPacket6*>(this)->getBackupDesignatedRouterID();}
    virtual void setBackupDesignatedRouterID(const DesignatedRouterID& backupDesignatedRouterID);
    virtual void setNeighborIDArraySize(unsigned int size);
    virtual unsigned int getNeighborIDArraySize() const;
    virtual RouterID& getNeighborID(unsigned int k);
    virtual const RouterID& getNeighborID(unsigned int k) const {return const_cast<OspfHelloPacket6*>(this)->getNeighborID(k);}
    virtual void setNeighborID(unsigned int k, const RouterID& neighborID);
};

inline void doPacking(cCommBuffer *b, OspfHelloPacket6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfHelloPacket6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * packet OspfDatabaseDescriptionPacket6 extends OspfPacket6 {
 *    uint16 interfaceMtu;
 *    OspfOptions6 options;
 *    OspfDdOptions6 ddOptions;
 *    uint32 ddSequenceNumber;
 *    OspfLsaHeader6 lsaHeaders[];
 * }
 * </pre>
 */
class OspfDatabaseDescriptionPacket6 : public ::OspfPacket6
{
  protected:
    uint16 interfaceMtu_var;
    OspfOptions6 options_var;
    OspfDdOptions6 ddOptions_var;
    uint32 ddSequenceNumber_var;
    OspfLsaHeader6 *lsaHeaders_var; // array ptr
    unsigned int lsaHeaders_arraysize;

  private:
    void copy(const OspfDatabaseDescriptionPacket6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfDatabaseDescriptionPacket6&);

  public:
    OspfDatabaseDescriptionPacket6(const char *name=NULL, int kind=0);
    OspfDatabaseDescriptionPacket6(const OspfDatabaseDescriptionPacket6& other);
    virtual ~OspfDatabaseDescriptionPacket6();
    OspfDatabaseDescriptionPacket6& operator=(const OspfDatabaseDescriptionPacket6& other);
    virtual OspfDatabaseDescriptionPacket6 *dup() const {return new OspfDatabaseDescriptionPacket6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint16 getInterfaceMtu() const;
    virtual void setInterfaceMtu(uint16 interfaceMtu);
    virtual OspfOptions6& getOptions();
    virtual const OspfOptions6& getOptions() const {return const_cast<OspfDatabaseDescriptionPacket6*>(this)->getOptions();}
    virtual void setOptions(const OspfOptions6& options);
    virtual OspfDdOptions6& getDdOptions();
    virtual const OspfDdOptions6& getDdOptions() const {return const_cast<OspfDatabaseDescriptionPacket6*>(this)->getDdOptions();}
    virtual void setDdOptions(const OspfDdOptions6& ddOptions);
    virtual uint32 getDdSequenceNumber() const;
    virtual void setDdSequenceNumber(uint32 ddSequenceNumber);
    virtual void setLsaHeadersArraySize(unsigned int size);
    virtual unsigned int getLsaHeadersArraySize() const;
    virtual OspfLsaHeader6& getLsaHeaders(unsigned int k);
    virtual const OspfLsaHeader6& getLsaHeaders(unsigned int k) const {return const_cast<OspfDatabaseDescriptionPacket6*>(this)->getLsaHeaders(k);}
    virtual void setLsaHeaders(unsigned int k, const OspfLsaHeader6& lsaHeaders);
};

inline void doPacking(cCommBuffer *b, OspfDatabaseDescriptionPacket6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfDatabaseDescriptionPacket6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * packet OspfLinkStateRequestPacket6 extends OspfPacket6 {
 *    OspfLsaRequest6 requests[];
 * }
 * </pre>
 */
class OspfLinkStateRequestPacket6 : public ::OspfPacket6
{
  protected:
    OspfLsaRequest6 *requests_var; // array ptr
    unsigned int requests_arraysize;

  private:
    void copy(const OspfLinkStateRequestPacket6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfLinkStateRequestPacket6&);

  public:
    OspfLinkStateRequestPacket6(const char *name=NULL, int kind=0);
    OspfLinkStateRequestPacket6(const OspfLinkStateRequestPacket6& other);
    virtual ~OspfLinkStateRequestPacket6();
    OspfLinkStateRequestPacket6& operator=(const OspfLinkStateRequestPacket6& other);
    virtual OspfLinkStateRequestPacket6 *dup() const {return new OspfLinkStateRequestPacket6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setRequestsArraySize(unsigned int size);
    virtual unsigned int getRequestsArraySize() const;
    virtual OspfLsaRequest6& getRequests(unsigned int k);
    virtual const OspfLsaRequest6& getRequests(unsigned int k) const {return const_cast<OspfLinkStateRequestPacket6*>(this)->getRequests(k);}
    virtual void setRequests(unsigned int k, const OspfLsaRequest6& requests);
};

inline void doPacking(cCommBuffer *b, OspfLinkStateRequestPacket6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfLinkStateRequestPacket6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * packet OspfLinkStateUpdatePacket6 extends OspfPacket6 {
 *    uint32 numberOfLsas;
 *    OspfRouterLsa6 routerLsas[];
 *    OspfNetworkLsa6 networkLsas[];
 *    OspfInterAreaPrefixLsa6 interAreaPrefixLsas[];
 *    OspfInterAreaRouterLsa6 interAreaRouterLsas[];
 *    OspfAsExternalLsa6 asExternalLsas[];
 *    OspfLinkLsa6 linkLsas[];
 *    OspfIntraAreaPrefixLsa6 intraAreaPrefixLsas[];
 * }
 * </pre>
 */
class OspfLinkStateUpdatePacket6 : public ::OspfPacket6
{
  protected:
    uint32 numberOfLsas_var;
    OspfRouterLsa6 *routerLsas_var; // array ptr
    unsigned int routerLsas_arraysize;
    OspfNetworkLsa6 *networkLsas_var; // array ptr
    unsigned int networkLsas_arraysize;
    OspfInterAreaPrefixLsa6 *interAreaPrefixLsas_var; // array ptr
    unsigned int interAreaPrefixLsas_arraysize;
    OspfInterAreaRouterLsa6 *interAreaRouterLsas_var; // array ptr
    unsigned int interAreaRouterLsas_arraysize;
    OspfAsExternalLsa6 *asExternalLsas_var; // array ptr
    unsigned int asExternalLsas_arraysize;
    OspfLinkLsa6 *linkLsas_var; // array ptr
    unsigned int linkLsas_arraysize;
    OspfIntraAreaPrefixLsa6 *intraAreaPrefixLsas_var; // array ptr
    unsigned int intraAreaPrefixLsas_arraysize;

  private:
    void copy(const OspfLinkStateUpdatePacket6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfLinkStateUpdatePacket6&);

  public:
    OspfLinkStateUpdatePacket6(const char *name=NULL, int kind=0);
    OspfLinkStateUpdatePacket6(const OspfLinkStateUpdatePacket6& other);
    virtual ~OspfLinkStateUpdatePacket6();
    OspfLinkStateUpdatePacket6& operator=(const OspfLinkStateUpdatePacket6& other);
    virtual OspfLinkStateUpdatePacket6 *dup() const {return new OspfLinkStateUpdatePacket6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint32 getNumberOfLsas() const;
    virtual void setNumberOfLsas(uint32 numberOfLsas);
    virtual void setRouterLsasArraySize(unsigned int size);
    virtual unsigned int getRouterLsasArraySize() const;
    virtual OspfRouterLsa6& getRouterLsas(unsigned int k);
    virtual const OspfRouterLsa6& getRouterLsas(unsigned int k) const {return const_cast<OspfLinkStateUpdatePacket6*>(this)->getRouterLsas(k);}
    virtual void setRouterLsas(unsigned int k, const OspfRouterLsa6& routerLsas);
    virtual void setNetworkLsasArraySize(unsigned int size);
    virtual unsigned int getNetworkLsasArraySize() const;
    virtual OspfNetworkLsa6& getNetworkLsas(unsigned int k);
    virtual const OspfNetworkLsa6& getNetworkLsas(unsigned int k) const {return const_cast<OspfLinkStateUpdatePacket6*>(this)->getNetworkLsas(k);}
    virtual void setNetworkLsas(unsigned int k, const OspfNetworkLsa6& networkLsas);
    virtual void setInterAreaPrefixLsasArraySize(unsigned int size);
    virtual unsigned int getInterAreaPrefixLsasArraySize() const;
    virtual OspfInterAreaPrefixLsa6& getInterAreaPrefixLsas(unsigned int k);
    virtual const OspfInterAreaPrefixLsa6& getInterAreaPrefixLsas(unsigned int k) const {return const_cast<OspfLinkStateUpdatePacket6*>(this)->getInterAreaPrefixLsas(k);}
    virtual void setInterAreaPrefixLsas(unsigned int k, const OspfInterAreaPrefixLsa6& interAreaPrefixLsas);
    virtual void setInterAreaRouterLsasArraySize(unsigned int size);
    virtual unsigned int getInterAreaRouterLsasArraySize() const;
    virtual OspfInterAreaRouterLsa6& getInterAreaRouterLsas(unsigned int k);
    virtual const OspfInterAreaRouterLsa6& getInterAreaRouterLsas(unsigned int k) const {return const_cast<OspfLinkStateUpdatePacket6*>(this)->getInterAreaRouterLsas(k);}
    virtual void setInterAreaRouterLsas(unsigned int k, const OspfInterAreaRouterLsa6& interAreaRouterLsas);
    virtual void setAsExternalLsasArraySize(unsigned int size);
    virtual unsigned int getAsExternalLsasArraySize() const;
    virtual OspfAsExternalLsa6& getAsExternalLsas(unsigned int k);
    virtual const OspfAsExternalLsa6& getAsExternalLsas(unsigned int k) const {return const_cast<OspfLinkStateUpdatePacket6*>(this)->getAsExternalLsas(k);}
    virtual void setAsExternalLsas(unsigned int k, const OspfAsExternalLsa6& asExternalLsas);
    virtual void setLinkLsasArraySize(unsigned int size);
    virtual unsigned int getLinkLsasArraySize() const;
    virtual OspfLinkLsa6& getLinkLsas(unsigned int k);
    virtual const OspfLinkLsa6& getLinkLsas(unsigned int k) const {return const_cast<OspfLinkStateUpdatePacket6*>(this)->getLinkLsas(k);}
    virtual void setLinkLsas(unsigned int k, const OspfLinkLsa6& linkLsas);
    virtual void setIntraAreaPrefixLsasArraySize(unsigned int size);
    virtual unsigned int getIntraAreaPrefixLsasArraySize() const;
    virtual OspfIntraAreaPrefixLsa6& getIntraAreaPrefixLsas(unsigned int k);
    virtual const OspfIntraAreaPrefixLsa6& getIntraAreaPrefixLsas(unsigned int k) const {return const_cast<OspfLinkStateUpdatePacket6*>(this)->getIntraAreaPrefixLsas(k);}
    virtual void setIntraAreaPrefixLsas(unsigned int k, const OspfIntraAreaPrefixLsa6& intraAreaPrefixLsas);
};

inline void doPacking(cCommBuffer *b, OspfLinkStateUpdatePacket6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfLinkStateUpdatePacket6& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ansa/ospfv3/messages/ansaOspfPacket6.msg</tt> by opp_msgc.
 * <pre>
 * packet OspfLinkStateAcknowledgementPacket6 extends OspfPacket6 {
 *    OspfLsaHeader6 lsaHeaders[];
 * }
 * </pre>
 */
class OspfLinkStateAcknowledgementPacket6 : public ::OspfPacket6
{
  protected:
    OspfLsaHeader6 *lsaHeaders_var; // array ptr
    unsigned int lsaHeaders_arraysize;

  private:
    void copy(const OspfLinkStateAcknowledgementPacket6& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OspfLinkStateAcknowledgementPacket6&);

  public:
    OspfLinkStateAcknowledgementPacket6(const char *name=NULL, int kind=0);
    OspfLinkStateAcknowledgementPacket6(const OspfLinkStateAcknowledgementPacket6& other);
    virtual ~OspfLinkStateAcknowledgementPacket6();
    OspfLinkStateAcknowledgementPacket6& operator=(const OspfLinkStateAcknowledgementPacket6& other);
    virtual OspfLinkStateAcknowledgementPacket6 *dup() const {return new OspfLinkStateAcknowledgementPacket6(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setLsaHeadersArraySize(unsigned int size);
    virtual unsigned int getLsaHeadersArraySize() const;
    virtual OspfLsaHeader6& getLsaHeaders(unsigned int k);
    virtual const OspfLsaHeader6& getLsaHeaders(unsigned int k) const {return const_cast<OspfLinkStateAcknowledgementPacket6*>(this)->getLsaHeaders(k);}
    virtual void setLsaHeaders(unsigned int k, const OspfLsaHeader6& lsaHeaders);
};

inline void doPacking(cCommBuffer *b, OspfLinkStateAcknowledgementPacket6& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OspfLinkStateAcknowledgementPacket6& obj) {obj.parsimUnpack(b);}


#endif // _ANSAOSPFPACKET6_M_H_
