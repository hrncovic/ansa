//
// Generated file, do not edit! Created by opp_msgc 4.2 from ansa/rip/RIPTimer.msg.
//

#ifndef _RIPTIMER_M_H_
#define _RIPTIMER_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPAddress.h"
// }}



/**
 * Enum generated from <tt>ansa/rip/RIPTimer.msg</tt> by opp_msgc.
 * <pre>
 * enum RIPTimerType
 * {
 *    hello = 1;
 *    timeout = 2;
 *    garbage = 3;
 *    trigger = 4;
 * };
 * </pre>
 */
enum RIPTimerType {
    hello = 1,
    timeout = 2,
    garbage = 3,
    trigger = 4
};

/**
 * Class generated from <tt>ansa/rip/RIPTimer.msg</tt> by opp_msgc.
 * <pre>
 * message RIPTimer extends cMessage
 * {
 *       char 		timerKind enum(RIPTimerType) = hello;
 *       int   	intID;
 * };
 * </pre>
 */
class RIPTimer : public ::cMessage
{
  protected:
    char timerKind_var;
    int intID_var;

  private:
    void copy(const RIPTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RIPTimer&);

  public:
    RIPTimer(const char *name=NULL, int kind=0);
    RIPTimer(const RIPTimer& other);
    virtual ~RIPTimer();
    RIPTimer& operator=(const RIPTimer& other);
    virtual RIPTimer *dup() const {return new RIPTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual char getTimerKind() const;
    virtual void setTimerKind(char timerKind);
    virtual int getIntID() const;
    virtual void setIntID(int intID);
};

inline void doPacking(cCommBuffer *b, RIPTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RIPTimer& obj) {obj.parsimUnpack(b);}


#endif // _RIPTIMER_M_H_
