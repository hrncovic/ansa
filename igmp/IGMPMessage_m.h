//
// Generated file, do not edit! Created by opp_msgc 4.2 from ansa/igmp/IGMPMessage.msg.
//

#ifndef _IGMPMESSAGE_M_H_
#define _IGMPMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPAddress.h"
// }}



/**
 * Enum generated from <tt>ansa/igmp/IGMPMessage.msg</tt> by opp_msgc.
 * <pre>
 * enum IGMPType
 * {
 * 
 *     IGMP_MEMBERSHIP_QUERY = 0x11;
 *     IGMP_MEMBERSHIP_REPORT_V1 = 0x12;
 *     IGMP_MEMBERSHIP_REPORT_V2 = 0x16;
 *     IGMP_LEAVE_GROUP = 0x17;
 * };
 * </pre>
 */
enum IGMPType {
    IGMP_MEMBERSHIP_QUERY = 0x11,
    IGMP_MEMBERSHIP_REPORT_V1 = 0x12,
    IGMP_MEMBERSHIP_REPORT_V2 = 0x16,
    IGMP_LEAVE_GROUP = 0x17
};

/**
 * Class generated from <tt>ansa/igmp/IGMPMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet IGMPMessage
 * {
 *     short type enum(IGMPType);
 *     short maxRespTime;			
 *     IPAddress groupAddress;
 * };
 * </pre>
 */
class IGMPMessage : public ::cPacket
{
  protected:
    short type_var;
    short maxRespTime_var;
    IPAddress groupAddress_var;

  private:
    void copy(const IGMPMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IGMPMessage&);

  public:
    IGMPMessage(const char *name=NULL, int kind=0);
    IGMPMessage(const IGMPMessage& other);
    virtual ~IGMPMessage();
    IGMPMessage& operator=(const IGMPMessage& other);
    virtual IGMPMessage *dup() const {return new IGMPMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getType() const;
    virtual void setType(short type);
    virtual short getMaxRespTime() const;
    virtual void setMaxRespTime(short maxRespTime);
    virtual IPAddress& getGroupAddress();
    virtual const IPAddress& getGroupAddress() const {return const_cast<IGMPMessage*>(this)->getGroupAddress();}
    virtual void setGroupAddress(const IPAddress& groupAddress);
};

inline void doPacking(cCommBuffer *b, IGMPMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IGMPMessage& obj) {obj.parsimUnpack(b);}


#endif // _IGMPMESSAGE_M_H_
