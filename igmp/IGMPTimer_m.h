//
// Generated file, do not edit! Created by opp_msgc 4.2 from ansa/igmp/IGMPTimer.msg.
//

#ifndef _IGMPTIMER_M_H_
#define _IGMPTIMER_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPAddress.h"
// }}



/**
 * Enum generated from <tt>ansa/igmp/IGMPTimer.msg</tt> by opp_msgc.
 * <pre>
 * enum IGMPTimerType
 * {
 *    TIMER_INIT_GENERAL_QUERY = 1;
 *    TIMER_GENERAL_QUERY = 2;
 *    TIMER_OTHER_QUERIER_PRESENT = 3;
 *    TIMER_GROUP_MEMBERSHIP = 4;
 *    TIMER_LAST_MEMBER = 5;
 * };
 * </pre>
 */
enum IGMPTimerType {
    TIMER_INIT_GENERAL_QUERY = 1,
    TIMER_GENERAL_QUERY = 2,
    TIMER_OTHER_QUERIER_PRESENT = 3,
    TIMER_GROUP_MEMBERSHIP = 4,
    TIMER_LAST_MEMBER = 5
};

/**
 * Class generated from <tt>ansa/igmp/IGMPTimer.msg</tt> by opp_msgc.
 * <pre>
 * message IGMPTimer extends cMessage
 * {
 *       char	timerKind enum(IGMPTimerType);
 *       int	count;
 *       int 	intID;
 *       IPAddress groupAddress;
 * };
 * </pre>
 */
class IGMPTimer : public ::cMessage
{
  protected:
    char timerKind_var;
    int count_var;
    int intID_var;
    IPAddress groupAddress_var;

  private:
    void copy(const IGMPTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IGMPTimer&);

  public:
    IGMPTimer(const char *name=NULL, int kind=0);
    IGMPTimer(const IGMPTimer& other);
    virtual ~IGMPTimer();
    IGMPTimer& operator=(const IGMPTimer& other);
    virtual IGMPTimer *dup() const {return new IGMPTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual char getTimerKind() const;
    virtual void setTimerKind(char timerKind);
    virtual int getCount() const;
    virtual void setCount(int count);
    virtual int getIntID() const;
    virtual void setIntID(int intID);
    virtual IPAddress& getGroupAddress();
    virtual const IPAddress& getGroupAddress() const {return const_cast<IGMPTimer*>(this)->getGroupAddress();}
    virtual void setGroupAddress(const IPAddress& groupAddress);
};

inline void doPacking(cCommBuffer *b, IGMPTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IGMPTimer& obj) {obj.parsimUnpack(b);}


#endif // _IGMPTIMER_M_H_
