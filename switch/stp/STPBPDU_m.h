//
// Generated file, do not edit! Created by opp_msgc 4.2 from ansa/switch/stp/STPBPDU.msg.
//

#ifndef _STPBPDU_M_H_
#define _STPBPDU_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "MACAddress.h"
// }}



/**
 * Class generated from <tt>ansa/switch/stp/STPBPDU.msg</tt> by opp_msgc.
 * <pre>
 * packet STPBPDU
 * {
 * 	unsigned int portRole; 
 * 	
 * 	
 * 	
 * 	bool tc;
 * 	bool tca;
 * 	
 * 	unsigned int vlan;
 * 
 * 	MACAddress bridgeID;
 * 	unsigned int bridgePriority;
 * 	
 * 	unsigned long rootPathCost;
 * 	
 * 	MACAddress rootID;
 * 	unsigned int rootPriority;
 * 
 * 	unsigned int portID;
 * 	unsigned int portPriority;
 * 
 *     unsigned int msgAge;
 *     unsigned int maxAge;
 *     unsigned int helloTime;
 *     unsigned int fwdDelay;	
 * 
 * }
 * </pre>
 */
class STPBPDU : public ::cPacket
{
  protected:
    unsigned int portRole_var;
    bool tc_var;
    bool tca_var;
    unsigned int vlan_var;
    MACAddress bridgeID_var;
    unsigned int bridgePriority_var;
    unsigned long rootPathCost_var;
    MACAddress rootID_var;
    unsigned int rootPriority_var;
    unsigned int portID_var;
    unsigned int portPriority_var;
    unsigned int msgAge_var;
    unsigned int maxAge_var;
    unsigned int helloTime_var;
    unsigned int fwdDelay_var;

  private:
    void copy(const STPBPDU& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const STPBPDU&);

  public:
    STPBPDU(const char *name=NULL, int kind=0);
    STPBPDU(const STPBPDU& other);
    virtual ~STPBPDU();
    STPBPDU& operator=(const STPBPDU& other);
    virtual STPBPDU *dup() const {return new STPBPDU(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPortRole() const;
    virtual void setPortRole(unsigned int portRole);
    virtual bool getTc() const;
    virtual void setTc(bool tc);
    virtual bool getTca() const;
    virtual void setTca(bool tca);
    virtual unsigned int getVlan() const;
    virtual void setVlan(unsigned int vlan);
    virtual MACAddress& getBridgeID();
    virtual const MACAddress& getBridgeID() const {return const_cast<STPBPDU*>(this)->getBridgeID();}
    virtual void setBridgeID(const MACAddress& bridgeID);
    virtual unsigned int getBridgePriority() const;
    virtual void setBridgePriority(unsigned int bridgePriority);
    virtual unsigned long getRootPathCost() const;
    virtual void setRootPathCost(unsigned long rootPathCost);
    virtual MACAddress& getRootID();
    virtual const MACAddress& getRootID() const {return const_cast<STPBPDU*>(this)->getRootID();}
    virtual void setRootID(const MACAddress& rootID);
    virtual unsigned int getRootPriority() const;
    virtual void setRootPriority(unsigned int rootPriority);
    virtual unsigned int getPortID() const;
    virtual void setPortID(unsigned int portID);
    virtual unsigned int getPortPriority() const;
    virtual void setPortPriority(unsigned int portPriority);
    virtual unsigned int getMsgAge() const;
    virtual void setMsgAge(unsigned int msgAge);
    virtual unsigned int getMaxAge() const;
    virtual void setMaxAge(unsigned int maxAge);
    virtual unsigned int getHelloTime() const;
    virtual void setHelloTime(unsigned int helloTime);
    virtual unsigned int getFwdDelay() const;
    virtual void setFwdDelay(unsigned int fwdDelay);
};

inline void doPacking(cCommBuffer *b, STPBPDU& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, STPBPDU& obj) {obj.parsimUnpack(b);}


#endif // _STPBPDU_M_H_
