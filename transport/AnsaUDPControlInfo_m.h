//
// Generated file, do not edit! Created by opp_msgc 4.2 from ansa/transport/AnsaUDPControlInfo.msg.
//

#ifndef _ANSAUDPCONTROLINFO_M_H_
#define _ANSAUDPCONTROLINFO_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPvXAddress.h"
#include "UDPControlInfo_m.h"
// }}



/**
 * Class generated from <tt>ansa/transport/AnsaUDPControlInfo.msg</tt> by opp_msgc.
 * <pre>
 * class AnsaUDPControlInfo
 * {
 *     int sockId = -1;   
 *     int userId = -1;   
 *     IPvXAddress srcAddr;  
 *     IPvXAddress destAddr; 
 *     unsigned char diffServCodePoint;  
 *     short timeToLive;
 *     int srcPort;   
 *     int destPort;  
 *     int interfaceId = -1; 
 * }
 * </pre>
 */
class AnsaUDPControlInfo : public ::cObject
{
  protected:
    int sockId_var;
    int userId_var;
    IPvXAddress srcAddr_var;
    IPvXAddress destAddr_var;
    unsigned char diffServCodePoint_var;
    short timeToLive_var;
    int srcPort_var;
    int destPort_var;
    int interfaceId_var;

  private:
    void copy(const AnsaUDPControlInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AnsaUDPControlInfo&);

  public:
    AnsaUDPControlInfo();
    AnsaUDPControlInfo(const AnsaUDPControlInfo& other);
    virtual ~AnsaUDPControlInfo();
    AnsaUDPControlInfo& operator=(const AnsaUDPControlInfo& other);
    virtual AnsaUDPControlInfo *dup() const {return new AnsaUDPControlInfo(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSockId() const;
    virtual void setSockId(int sockId);
    virtual int getUserId() const;
    virtual void setUserId(int userId);
    virtual IPvXAddress& getSrcAddr();
    virtual const IPvXAddress& getSrcAddr() const {return const_cast<AnsaUDPControlInfo*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const IPvXAddress& srcAddr);
    virtual IPvXAddress& getDestAddr();
    virtual const IPvXAddress& getDestAddr() const {return const_cast<AnsaUDPControlInfo*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPvXAddress& destAddr);
    virtual unsigned char getDiffServCodePoint() const;
    virtual void setDiffServCodePoint(unsigned char diffServCodePoint);
    virtual short getTimeToLive() const;
    virtual void setTimeToLive(short timeToLive);
    virtual int getSrcPort() const;
    virtual void setSrcPort(int srcPort);
    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);
    virtual int getInterfaceId() const;
    virtual void setInterfaceId(int interfaceId);
};

inline void doPacking(cCommBuffer *b, AnsaUDPControlInfo& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AnsaUDPControlInfo& obj) {obj.parsimUnpack(b);}


#endif // _ANSAUDPCONTROLINFO_M_H_
